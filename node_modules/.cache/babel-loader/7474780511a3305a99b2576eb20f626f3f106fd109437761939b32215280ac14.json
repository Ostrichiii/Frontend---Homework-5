{"ast":null,"code":"import mockData from \"./data.json\";\nconst useMock = process.env.REACT_APP_USE_MOCK === \"true\";\nconst API_URL = process.env.REACT_APP_API_URL;\nconst mockResponse = data => new Promise(resolve => setTimeout(() => resolve(data), 300));\nconst apiRequest = async (url, options = {}) => {\n  const response = await fetch(url, options);\n  if (!response.ok) {\n    throw new Error(`Error ${response.status}: ${response.statusText}`);\n  }\n  return response.json();\n};\nexport const getShoppingLists = async () => {\n  return useMock ? mockResponse(mockData.shoppingLists) : apiRequest(`${API_URL}/shoppingList/list`);\n};\nexport const getShoppingListById = async id => {\n  return useMock ? mockResponse(mockData.shoppingLists.find(list => list.id === parseInt(id, 10)) || Promise.reject(new Error(\"Shopping list not found\"))) : apiRequest(`${API_URL}/shoppingList/get/${id}`);\n};\n\n// Create a shopping list\nexport const createShoppingList = async newList => {\n  if (useMock) {\n    const newId = mockData.shoppingLists.length + 1;\n    const createdList = {\n      id: newId,\n      ...newList\n    };\n    mockData.shoppingLists.push(createdList);\n    return mockResponse(createdList);\n  }\n  return apiRequest(`${API_URL}/shoppingList/create`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(newList)\n  });\n};\n\n// Update a shopping list\nexport const updateShoppingList = async (id, updatedData) => {\n  if (useMock) {\n    const list = mockData.shoppingLists.find(list => list.id === parseInt(id, 10));\n    if (!list) throw new Error(\"Shopping list not found\");\n    Object.assign(list, updatedData);\n    return mockResponse(list);\n  }\n  return apiRequest(`${API_URL}/shoppingList/update/${id}`, {\n    method: \"PUT\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(updatedData)\n  });\n};\n\n// Delete a shopping list\nexport const deleteShoppingList = async id => {\n  if (useMock) {\n    const index = mockData.shoppingLists.findIndex(list => list.id === parseInt(id, 10));\n    if (index === -1) throw new Error(\"Shopping list not found\");\n    mockData.shoppingLists.splice(index, 1);\n    return mockResponse({\n      message: \"Shopping list deleted\"\n    });\n  }\n  return apiRequest(`${API_URL}/shoppingList/delete/${id}`, {\n    method: \"DELETE\"\n  });\n};","map":{"version":3,"names":["mockData","useMock","process","env","REACT_APP_USE_MOCK","API_URL","REACT_APP_API_URL","mockResponse","data","Promise","resolve","setTimeout","apiRequest","url","options","response","fetch","ok","Error","status","statusText","json","getShoppingLists","shoppingLists","getShoppingListById","id","find","list","parseInt","reject","createShoppingList","newList","newId","length","createdList","push","method","headers","body","JSON","stringify","updateShoppingList","updatedData","Object","assign","deleteShoppingList","index","findIndex","splice","message"],"sources":["/Users/zdenek/Desktop/STUDY/Unicorn/5 semester/homework-3/src/api.js"],"sourcesContent":["import mockData from \"./data.json\";\n\nconst useMock = process.env.REACT_APP_USE_MOCK === \"true\";\nconst API_URL = process.env.REACT_APP_API_URL;\n\n\nconst mockResponse = (data) =>\n  new Promise((resolve) => setTimeout(() => resolve(data), 300));\n\n\nconst apiRequest = async (url, options = {}) => {\n  const response = await fetch(url, options);\n  if (!response.ok) {\n    throw new Error(`Error ${response.status}: ${response.statusText}`);\n  }\n  return response.json();\n};\n\n\nexport const getShoppingLists = async () => {\n  return useMock\n    ? mockResponse(mockData.shoppingLists)\n    : apiRequest(`${API_URL}/shoppingList/list`);\n};\n\n\nexport const getShoppingListById = async (id) => {\n  return useMock\n    ? mockResponse(\n        mockData.shoppingLists.find((list) => list.id === parseInt(id, 10)) ||\n          Promise.reject(new Error(\"Shopping list not found\"))\n      )\n    : apiRequest(`${API_URL}/shoppingList/get/${id}`);\n};\n\n// Create a shopping list\nexport const createShoppingList = async (newList) => {\n  if (useMock) {\n    const newId = mockData.shoppingLists.length + 1;\n    const createdList = { id: newId, ...newList };\n    mockData.shoppingLists.push(createdList);\n    return mockResponse(createdList);\n  }\n  return apiRequest(`${API_URL}/shoppingList/create`, {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify(newList),\n  });\n};\n\n// Update a shopping list\nexport const updateShoppingList = async (id, updatedData) => {\n  if (useMock) {\n    const list = mockData.shoppingLists.find((list) => list.id === parseInt(id, 10));\n    if (!list) throw new Error(\"Shopping list not found\");\n    Object.assign(list, updatedData);\n    return mockResponse(list);\n  }\n  return apiRequest(`${API_URL}/shoppingList/update/${id}`, {\n    method: \"PUT\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify(updatedData),\n  });\n};\n\n// Delete a shopping list\nexport const deleteShoppingList = async (id) => {\n  if (useMock) {\n    const index = mockData.shoppingLists.findIndex((list) => list.id === parseInt(id, 10));\n    if (index === -1) throw new Error(\"Shopping list not found\");\n    mockData.shoppingLists.splice(index, 1);\n    return mockResponse({ message: \"Shopping list deleted\" });\n  }\n  return apiRequest(`${API_URL}/shoppingList/delete/${id}`, {\n    method: \"DELETE\",\n  });\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}