{"ast":null,"code":"import mockData from \"./data.json\";\nconst useMock = process.env.REACT_APP_USE_MOCK === \"true\";\nconst API_URL = process.env.REACT_APP_API_URL;\nexport const getShoppingLists = async () => {\n  if (useMock) {\n    return Promise.resolve(mockData.shoppingLists);\n  }\n  const response = await fetch(`${API_URL}/shoppingList/list`);\n  if (!response.ok) throw new Error(\"Failed to fetch shopping lists\");\n  return response.json();\n};\n\n// Fetch a specific shopping list by ID\nexport const getShoppingListById = async id => {\n  if (useMock) {\n    const list = mockData.shoppingLists.find(list => list.id === parseInt(id, 10));\n    if (!list) throw new Error(\"Shopping list not found\");\n    return Promise.resolve(list);\n  }\n  const response = await fetch(`${API_URL}/shoppingList/get/${id}`);\n  if (!response.ok) throw new Error(\"Failed to fetch shopping list\");\n  return response.json();\n};\n\n// Create a new shopping list\nexport const createShoppingList = async newList => {\n  if (useMock) {\n    const newId = mockData.shoppingLists.length + 1;\n    const list = {\n      id: newId,\n      ...newList\n    };\n    mockData.shoppingLists.push(list);\n    return Promise.resolve(list);\n  }\n  const response = await fetch(`${API_URL}/shoppingList/create`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(newList)\n  });\n  if (!response.ok) throw new Error(\"Failed to create a new shopping list\");\n  return response.json();\n};\n\n// Update an existing shopping list\nexport const updateShoppingList = async (id, updatedData) => {\n  if (useMock) {\n    const index = mockData.shoppingLists.findIndex(list => list.id === parseInt(id, 10));\n    if (index === -1) throw new Error(\"Shopping list not found\");\n    mockData.shoppingLists[index] = {\n      ...mockData.shoppingLists[index],\n      ...updatedData\n    };\n    return Promise.resolve(mockData.shoppingLists[index]);\n  }\n  const response = await fetch(`${API_URL}/shoppingList/update/${id}`, {\n    method: \"PUT\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(updatedData)\n  });\n  if (!response.ok) throw new Error(\"Failed to update the shopping list\");\n  return response.json();\n};\n\n// Delete a shopping list\nexport const deleteShoppingList = async id => {\n  if (useMock) {\n    const index = mockData.shoppingLists.findIndex(list => list.id === parseInt(id, 10));\n    if (index === -1) throw new Error(\"Shopping list not found\");\n    mockData.shoppingLists.splice(index, 1);\n    return Promise.resolve({\n      message: \"Shopping list deleted successfully\"\n    });\n  }\n  const response = await fetch(`${API_URL}/shoppingList/delete/${id}`, {\n    method: \"DELETE\"\n  });\n  if (!response.ok) throw new Error(\"Failed to delete the shopping list\");\n  return response.json();\n};","map":{"version":3,"names":["mockData","useMock","process","env","REACT_APP_USE_MOCK","API_URL","REACT_APP_API_URL","getShoppingLists","Promise","resolve","shoppingLists","response","fetch","ok","Error","json","getShoppingListById","id","list","find","parseInt","createShoppingList","newList","newId","length","push","method","headers","body","JSON","stringify","updateShoppingList","updatedData","index","findIndex","deleteShoppingList","splice","message"],"sources":["/Users/zdenek/Desktop/STUDY/Unicorn/5 semester/homework-3/src/api.js"],"sourcesContent":["import mockData from \"./data.json\";\n\nconst useMock = process.env.REACT_APP_USE_MOCK === \"true\";\nconst API_URL = process.env.REACT_APP_API_URL;\n\nexport const getShoppingLists = async () => {\n  if (useMock) {\n    return Promise.resolve(mockData.shoppingLists);\n  }\n  const response = await fetch(`${API_URL}/shoppingList/list`);\n  if (!response.ok) throw new Error(\"Failed to fetch shopping lists\");\n  return response.json();\n};\n\n// Fetch a specific shopping list by ID\nexport const getShoppingListById = async (id) => {\n  if (useMock) {\n    const list = mockData.shoppingLists.find((list) => list.id === parseInt(id, 10));\n    if (!list) throw new Error(\"Shopping list not found\");\n    return Promise.resolve(list);\n  }\n  const response = await fetch(`${API_URL}/shoppingList/get/${id}`);\n  if (!response.ok) throw new Error(\"Failed to fetch shopping list\");\n  return response.json();\n};\n\n// Create a new shopping list\nexport const createShoppingList = async (newList) => {\n  if (useMock) {\n    const newId = mockData.shoppingLists.length + 1;\n    const list = { id: newId, ...newList };\n    mockData.shoppingLists.push(list);\n    return Promise.resolve(list);\n  }\n  const response = await fetch(`${API_URL}/shoppingList/create`, {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify(newList),\n  });\n  if (!response.ok) throw new Error(\"Failed to create a new shopping list\");\n  return response.json();\n};\n\n// Update an existing shopping list\nexport const updateShoppingList = async (id, updatedData) => {\n  if (useMock) {\n    const index = mockData.shoppingLists.findIndex((list) => list.id === parseInt(id, 10));\n    if (index === -1) throw new Error(\"Shopping list not found\");\n    mockData.shoppingLists[index] = { ...mockData.shoppingLists[index], ...updatedData };\n    return Promise.resolve(mockData.shoppingLists[index]);\n  }\n  const response = await fetch(`${API_URL}/shoppingList/update/${id}`, {\n    method: \"PUT\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify(updatedData),\n  });\n  if (!response.ok) throw new Error(\"Failed to update the shopping list\");\n  return response.json();\n};\n\n// Delete a shopping list\nexport const deleteShoppingList = async (id) => {\n  if (useMock) {\n    const index = mockData.shoppingLists.findIndex((list) => list.id === parseInt(id, 10));\n    if (index === -1) throw new Error(\"Shopping list not found\");\n    mockData.shoppingLists.splice(index, 1);\n    return Promise.resolve({ message: \"Shopping list deleted successfully\" });\n  }\n  const response = await fetch(`${API_URL}/shoppingList/delete/${id}`, {\n    method: \"DELETE\",\n  });\n  if (!response.ok) throw new Error(\"Failed to delete the shopping list\");\n  return response.json();\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}