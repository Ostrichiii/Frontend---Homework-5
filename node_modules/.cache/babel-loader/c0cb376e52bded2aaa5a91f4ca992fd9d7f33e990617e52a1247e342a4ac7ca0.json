{"ast":null,"code":"import mockData from \"./data.json\";\nconst useMock = process.env.REACT_APP_USE_MOCK === \"true\";\nconst API_URL = process.env.REACT_APP_API_URL;\n\n// Helper function to handle fetch responses\nconst handleResponse = async response => {\n  if (!response.ok) {\n    const error = await response.text();\n    throw new Error(`API Error: ${response.status} - ${error}`);\n  }\n  return response.json();\n};\n\n// Helper to simulate mock data delay\nconst mockResponse = (data, delay = 500) => new Promise(resolve => setTimeout(() => resolve(data), delay));\n\n// Get all shopping lists\nexport const getShoppingLists = async () => {\n  if (useMock) {\n    return mockResponse(mockData.shoppingLists);\n  }\n  const response = await fetch(`${API_URL}/shoppingList/list`);\n  return handleResponse(response);\n};\n\n// Get a single shopping list by ID\nexport const getShoppingListById = async id => {\n  if (useMock) {\n    const list = mockData.shoppingLists.find(list => list.id === parseInt(id, 10));\n    if (!list) throw new Error(`Mock Error: Shopping list with ID ${id} not found`);\n    return mockResponse(list);\n  }\n  const response = await fetch(`${API_URL}/shoppingList/get/${id}`);\n  return handleResponse(response);\n};\n\n// Create a new shopping list\nexport const createShoppingList = async newList => {\n  if (useMock) {\n    const newId = mockData.shoppingLists.length + 1;\n    const list = {\n      id: newId,\n      ...newList\n    };\n    mockData.shoppingLists.push(list);\n    return mockResponse(list);\n  }\n  const response = await fetch(`${API_URL}/shoppingList/create`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(newList)\n  });\n  return handleResponse(response);\n};\n\n// Update an existing shopping list\nexport const updateShoppingList = async (id, updatedData) => {\n  if (useMock) {\n    const index = mockData.shoppingLists.findIndex(list => list.id === parseInt(id, 10));\n    if (index === -1) throw new Error(`Mock Error: Shopping list with ID ${id} not found`);\n    mockData.shoppingLists[index] = {\n      ...mockData.shoppingLists[index],\n      ...updatedData\n    };\n    return mockResponse(mockData.shoppingLists[index]);\n  }\n  const response = await fetch(`${API_URL}/shoppingList/update/${id}`, {\n    method: \"PUT\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(updatedData)\n  });\n  return handleResponse(response);\n};\n\n// Delete a shopping list\nexport const deleteShoppingList = async id => {\n  if (useMock) {\n    const index = mockData.shoppingLists.findIndex(list => list.id === parseInt(id, 10));\n    if (index === -1) throw new Error(`Mock Error: Shopping list with ID ${id} not found`);\n    mockData.shoppingLists.splice(index, 1);\n    return mockResponse({\n      message: `Mock: Shopping list with ID ${id} deleted`\n    });\n  }\n  const response = await fetch(`${API_URL}/shoppingList/delete/${id}`, {\n    method: \"DELETE\"\n  });\n  return handleResponse(response);\n};","map":{"version":3,"names":["mockData","useMock","process","env","REACT_APP_USE_MOCK","API_URL","REACT_APP_API_URL","handleResponse","response","ok","error","text","Error","status","json","mockResponse","data","delay","Promise","resolve","setTimeout","getShoppingLists","shoppingLists","fetch","getShoppingListById","id","list","find","parseInt","createShoppingList","newList","newId","length","push","method","headers","body","JSON","stringify","updateShoppingList","updatedData","index","findIndex","deleteShoppingList","splice","message"],"sources":["/Users/zdenek/Desktop/STUDY/Unicorn/5 semester/homework-3/src/api.js"],"sourcesContent":["import mockData from \"./data.json\";\n\nconst useMock = process.env.REACT_APP_USE_MOCK === \"true\";\nconst API_URL = process.env.REACT_APP_API_URL;\n\n// Helper function to handle fetch responses\nconst handleResponse = async (response) => {\n  if (!response.ok) {\n    const error = await response.text();\n    throw new Error(`API Error: ${response.status} - ${error}`);\n  }\n  return response.json();\n};\n\n// Helper to simulate mock data delay\nconst mockResponse = (data, delay = 500) =>\n  new Promise((resolve) => setTimeout(() => resolve(data), delay));\n\n// Get all shopping lists\nexport const getShoppingLists = async () => {\n  if (useMock) {\n    return mockResponse(mockData.shoppingLists);\n  }\n  const response = await fetch(`${API_URL}/shoppingList/list`);\n  return handleResponse(response);\n};\n\n// Get a single shopping list by ID\nexport const getShoppingListById = async (id) => {\n  if (useMock) {\n    const list = mockData.shoppingLists.find((list) => list.id === parseInt(id, 10));\n    if (!list) throw new Error(`Mock Error: Shopping list with ID ${id} not found`);\n    return mockResponse(list);\n  }\n  const response = await fetch(`${API_URL}/shoppingList/get/${id}`);\n  return handleResponse(response);\n};\n\n// Create a new shopping list\nexport const createShoppingList = async (newList) => {\n  if (useMock) {\n    const newId = mockData.shoppingLists.length + 1;\n    const list = { id: newId, ...newList };\n    mockData.shoppingLists.push(list);\n    return mockResponse(list);\n  }\n  const response = await fetch(`${API_URL}/shoppingList/create`, {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify(newList),\n  });\n  return handleResponse(response);\n};\n\n// Update an existing shopping list\nexport const updateShoppingList = async (id, updatedData) => {\n  if (useMock) {\n    const index = mockData.shoppingLists.findIndex((list) => list.id === parseInt(id, 10));\n    if (index === -1) throw new Error(`Mock Error: Shopping list with ID ${id} not found`);\n    mockData.shoppingLists[index] = { ...mockData.shoppingLists[index], ...updatedData };\n    return mockResponse(mockData.shoppingLists[index]);\n  }\n  const response = await fetch(`${API_URL}/shoppingList/update/${id}`, {\n    method: \"PUT\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify(updatedData),\n  });\n  return handleResponse(response);\n};\n\n// Delete a shopping list\nexport const deleteShoppingList = async (id) => {\n  if (useMock) {\n    const index = mockData.shoppingLists.findIndex((list) => list.id === parseInt(id, 10));\n    if (index === -1) throw new Error(`Mock Error: Shopping list with ID ${id} not found`);\n    mockData.shoppingLists.splice(index, 1);\n    return mockResponse({ message: `Mock: Shopping list with ID ${id} deleted` });\n  }\n  const response = await fetch(`${API_URL}/shoppingList/delete/${id}`, {\n    method: \"DELETE\",\n  });\n  return handleResponse(response);\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}