{"ast":null,"code":"import mockData from \"./data.json\";\nconst useMock = process.env.REACT_APP_USE_MOCK === \"true\";\nexport const getShoppingLists = async () => {\n  if (useMock) {\n    return Promise.resolve(mockData.shoppingLists);\n  }\n  const response = await fetch(\"/shoppingList/list\");\n  if (!response.ok) throw new Error(\"Failed to fetch shopping lists\");\n  return response.json();\n};\nexport const getShoppingListById = async id => {\n  if (useMock) {\n    return Promise.resolve(mockData.shoppingLists.find(list => list.id === parseInt(id, 10)));\n  }\n  const response = await fetch(`/shoppingList/get/${id}`);\n  if (!response.ok) throw new Error(\"Failed to fetch shopping list\");\n  return response.json();\n};\nexport const createShoppingList = async newList => {\n  if (useMock) {\n    const newId = mockData.shoppingLists.length + 1;\n    const list = {\n      id: newId,\n      ...newList\n    };\n    mockData.shoppingLists.push(list);\n    return Promise.resolve(list);\n  }\n  const response = await fetch(\"/shoppingList/create\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(newList)\n  });\n  if (!response.ok) throw new Error(\"Failed to create a new shopping list\");\n  return response.json();\n};","map":{"version":3,"names":["mockData","useMock","process","env","REACT_APP_USE_MOCK","getShoppingLists","Promise","resolve","shoppingLists","response","fetch","ok","Error","json","getShoppingListById","id","find","list","parseInt","createShoppingList","newList","newId","length","push","method","headers","body","JSON","stringify"],"sources":["/Users/zdenek/Desktop/STUDY/Unicorn/5 semester/homework-3/src/api.js"],"sourcesContent":["import mockData from \"./data.json\";\n\nconst useMock = process.env.REACT_APP_USE_MOCK === \"true\";\n\nexport const getShoppingLists = async () => {\n  if (useMock) {\n    return Promise.resolve(mockData.shoppingLists);\n  }\n  const response = await fetch(\"/shoppingList/list\");\n  if (!response.ok) throw new Error(\"Failed to fetch shopping lists\");\n  return response.json();\n};\n\nexport const getShoppingListById = async (id) => {\n  if (useMock) {\n    return Promise.resolve(\n      mockData.shoppingLists.find((list) => list.id === parseInt(id, 10))\n    );\n  }\n  const response = await fetch(`/shoppingList/get/${id}`);\n  if (!response.ok) throw new Error(\"Failed to fetch shopping list\");\n  return response.json();\n};\n\nexport const createShoppingList = async (newList) => {\n  if (useMock) {\n    const newId = mockData.shoppingLists.length + 1;\n    const list = { id: newId, ...newList };\n    mockData.shoppingLists.push(list);\n    return Promise.resolve(list);\n  }\n  const response = await fetch(\"/shoppingList/create\", {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify(newList),\n  });\n  if (!response.ok) throw new Error(\"Failed to create a new shopping list\");\n  return response.json();\n};"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,aAAa;AAElC,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,kBAAkB,KAAK,MAAM;AAEzD,OAAO,MAAMC,gBAAgB,GAAG,MAAAA,CAAA,KAAY;EAC1C,IAAIJ,OAAO,EAAE;IACX,OAAOK,OAAO,CAACC,OAAO,CAACP,QAAQ,CAACQ,aAAa,CAAC;EAChD;EACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,oBAAoB,CAAC;EAClD,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,gCAAgC,CAAC;EACnE,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;AACxB,CAAC;AAED,OAAO,MAAMC,mBAAmB,GAAG,MAAOC,EAAE,IAAK;EAC/C,IAAId,OAAO,EAAE;IACX,OAAOK,OAAO,CAACC,OAAO,CACpBP,QAAQ,CAACQ,aAAa,CAACQ,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACF,EAAE,KAAKG,QAAQ,CAACH,EAAE,EAAE,EAAE,CAAC,CACpE,CAAC;EACH;EACA,MAAMN,QAAQ,GAAG,MAAMC,KAAK,CAAC,qBAAqBK,EAAE,EAAE,CAAC;EACvD,IAAI,CAACN,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,+BAA+B,CAAC;EAClE,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;AACxB,CAAC;AAED,OAAO,MAAMM,kBAAkB,GAAG,MAAOC,OAAO,IAAK;EACnD,IAAInB,OAAO,EAAE;IACX,MAAMoB,KAAK,GAAGrB,QAAQ,CAACQ,aAAa,CAACc,MAAM,GAAG,CAAC;IAC/C,MAAML,IAAI,GAAG;MAAEF,EAAE,EAAEM,KAAK;MAAE,GAAGD;IAAQ,CAAC;IACtCpB,QAAQ,CAACQ,aAAa,CAACe,IAAI,CAACN,IAAI,CAAC;IACjC,OAAOX,OAAO,CAACC,OAAO,CAACU,IAAI,CAAC;EAC9B;EACA,MAAMR,QAAQ,GAAG,MAAMC,KAAK,CAAC,sBAAsB,EAAE;IACnDc,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACR,OAAO;EAC9B,CAAC,CAAC;EACF,IAAI,CAACX,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,sCAAsC,CAAC;EACzE,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;AACxB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}